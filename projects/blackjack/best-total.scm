 (define (card-to-n card)
        (cond ((equal? '2 (first card)) 2)
              ((equal? '3 (first card)) 3)
              ((equal? '4 (first card)) 4)
              ((equal? '5 (first card)) 5)
              ((equal? '6 (first card)) 6)
              ((equal? '7 (first card)) 7)
              ((equal? '8 (first card)) 8)
              ((equal? '9 (first card)) 9)
              ((equal? '10 (word (first card)
                                 (first (bf card)))) 10)
              ((equal? '1 (first card)) 1)
              ((equal? 'j (first card)) 10)
              ((equal? 'k (first card)) 10)
              ((equal? 'q (first card)) 10)
              ((equal? 'a (first card)) 11)))

(define (best-total hand)
    (define (count-normal hand total)
        (cond ((equal? hand '()) total)
              ((equal? (card-to-n (first hand)) 11)
               (count-ace (bf hand) (+ 11 total)))
              (else (count-normal (bf hand)
                                  (+ (card-to-n (first hand)) total)))))
    
    (define (count-ace hand total)
        (define (evaluate total)
            (if (> total 21)
                (- total 10)
                total))

        (if (equal? hand '())
            (evaluate total)
            (count-ace (bf hand) (+ (card-to-n (first hand)) total))))

    (count-normal hand 0))
