 (define (card-to-n card)
        (cond ((equal? '2 (first card)) 2)
              ((equal? '3 (first card)) 3)
              ((equal? '4 (first card)) 4)
              ((equal? '5 (first card)) 5)
              ((equal? '6 (first card)) 6)
              ((equal? '7 (first card)) 7)
              ((equal? '8 (first card)) 8)
              ((equal? '9 (first card)) 9)
              ((equal? '10 (word (first card)
                                 (first (bf card)))) 10)
              ((equal? '1 (first card)) 1)
              ((equal? 'J (first card)) 10)
              ((equal? 'K (first card)) 10)
              ((equal? 'Q (first card)) 10)
              ((equal? 'A (first card)) 11)))

(define (best-total hand)
    (define (adjust-score total aces)
        (cond ((= 0 aces) total)
              ((> total 21) (adjust-score (- total 10) (- aces 1)))
              (else total)))

    (define (count hand total aces)
        (cond ((equal? hand '()) (adjust-score total aces))
              ((equal? (card-to-n (first hand)) 11)
               (count (bf hand) (+ 11 total) (+ 1 aces)))
              (else (count (bf hand)
                           (+ (card-to-n (first hand)) total) aces))))
    (count hand 0 0))
