(define (substitute l old-word new-word)
    (cond ((null? l) '())
          ((list? (car l))
           (append (list (substitute (car l) old-word new-word))
                   (substitute (cdr l) old-word new-word)))
          ((equal? (car l) old-word)
           (append (list new-word) (substitute (cdr l) old-word new-word)))
          (else (append (list (car l)) (substitute (cdr l) old-word new-word)))))

(define (element?-with-index e items)
    (define (helper items index)
        (cond ((null? items) -1)
              ((equal? (car items) e) index)
              (else (helper (cdr items) (+ 1 index)))))
    (helper items 0))

(define (select-from-list items index)
    (if (= index 0)
        (car items)
        (select-from-list (cdr items) (- index 1))))

(define (substitute2 l old-words new-words)
    (cond ((null? l) '())
          ((list? (car l))
           (append (list (substitute2 (car l) old-words new-words))
                   (substitute2 (cdr l) old-words new-words)))
          (else (let ((index (element?-with-index (car l) old-words)))
                  (if (= -1 index)
                      (append (list (car l))
                              (substitute2 (cdr l) old-words new-words))
                      (append (list (select-from-list new-words index))
                              (substitute2 (cdr l) old-words new-words)))))))


(define (cxr-function command)
    (define (second x) (first (bf x)))

    (define (butsecond x) (word (first x) (bf (bf x))))

    (define (helper f command)
        (cond ((equal? command 'cr) f)
              ((equal? 'a (second command)) (helper (lambda (x) (car (f x))) (butsecond command)))
              ((equal? 'd (second command)) (helper (lambda (x) (cdr (f x))) (butsecond command)))))
    
    (helper (lambda (x) x) command))